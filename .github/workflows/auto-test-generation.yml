name: Auto Test Generation

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

permissions:
  contents: write
  pull-requests: write
  actions: read
  checks: write
  issues: write

env:
  JAVA_VERSION: '17'
  MAVEN_OPTS: '-Xmx1024m'

jobs:
  generate-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions:
      contents: write
      pull-requests: write
      actions: read
      checks: write
      issues: write
      repository-projects: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Create test directory structure
      run: |
        mkdir -p src/test/java/com/starbucks/menuaichat/service
        mkdir -p src/test/resources

    - name: Setup GitHub CLI and Check Copilot
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # GitHub CLI is pre-installed and auto-authenticated via GH_TOKEN
        echo "✅ GitHub CLI is available: $(gh --version)"
        echo "✅ GitHub CLI is authenticated via GH_TOKEN"
        
        # Try to install Copilot CLI extension (may not be available in public beta)
        if gh extension install github/gh-copilot 2>/dev/null; then
          echo "✅ GitHub Copilot CLI extension installed"
          echo "COPILOT_AVAILABLE=true" >> $GITHUB_ENV
        else
          echo "⚠️  GitHub Copilot CLI not available, will use smart templates"
          echo "COPILOT_AVAILABLE=false" >> $GITHUB_ENV
        fi

    - name: Generate Tests with GitHub Copilot
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COPILOT_AVAILABLE: ${{ env.COPILOT_AVAILABLE }}
      run: |
        chmod +x .github/scripts/copilot-test-generator.sh
        .github/scripts/copilot-test-generator.sh



    - name: Check for generated tests
      id: changes
      run: |
        if [[ -n $(git status --porcelain) ]]; then
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "✅ New tests were generated"
        else
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "ℹ️  No new tests to generate"
        fi

    - name: Run unit tests only (mocked)
      if: steps.changes.outputs.changes == 'true'
      run: |
        echo "🧪 Running generated unit tests (all mocked, no external dependencies)..."
        mvn clean test -Dtest="**/*Test" -DfailIfNoTests=false



    - name: Create Pull Request with GitHub CLI
      if: steps.changes.outputs.changes == 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Configure git
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
        # Create and switch to new branch
        BRANCH_NAME="auto-generated-tests-$(date +%Y%m%d-%H%M%S)"
        git checkout -b "$BRANCH_NAME"
        
        # Add and commit changes
        git add src/test/
        git commit -m "feat: Add auto-generated unit tests

        ✅ Generated unit tests for all Java classes
        ✅ Tests verified to compile and run successfully
        ✅ Includes proper mocking structure
        ✅ Ready for customization with business logic"
        
        # Push branch
        git push origin "$BRANCH_NAME"
        
        # Create PR using GitHub CLI (with fallback)
        echo "🔄 Attempting to create pull request..."
        # Determine base branch dynamically (default branch of the repo)
        BASE_BRANCH=$(gh repo view --json defaultBranchRef -q .defaultBranchRef.name || echo "master")
        echo "Using base branch: $BASE_BRANCH"
        if gh pr create \
          --title "🤖 Auto-Generated Service Tests" \
          --base "$BASE_BRANCH" \
          --body "## 🤖 Auto-Generated Service Tests ✅

        This PR contains automatically generated unit tests for Service classes.

        **✅ All generated tests have been verified to compile and run successfully!**

        ### What's included:
        - ✅ Unit tests for all @Service classes
        - ✅ Proper dependency mocking with lenient mode
        - ✅ JUnit 5 + Mockito best practices
        - ✅ Ready-to-customize test scaffolding

        ### Generated test files:
        \`\`\`
        src/test/java/com/starbucks/menuaichat/service/
        ├── MenuServiceTest.java
        ├── StarbucksAiChatServiceTest.java  
        ├── DataLoaderServiceTest.java
        └── SpringAiVectorServiceTest.java
        \`\`\`

        ### Next steps:
        1. Review the generated tests
        2. Implement the TODO sections with actual method calls
        3. Add specific assertions for your business logic
        4. Customize test scenarios as needed

        **Note**: Tests are generated as working scaffolding - customize with your specific logic!" \
          --base master \
          --head "$BRANCH_NAME"; then
          echo "✅ Pull request created successfully!"
        else
          echo "⚠️  PR creation failed due to permissions, but branch '$BRANCH_NAME' has been pushed."
          echo "📝 You can manually create a PR at:"
          echo "   https://github.com/${{ github.repository }}/pull/new/$BRANCH_NAME"
          echo ""
          echo "🎉 Test generation completed successfully!"
        fi

  run-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run tests
      run: |
        mvn clean test -Dspring.profiles.active=test

    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: 'target/surefire-reports/*.xml'
        reporter: java-junit